from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    ContextTypes
)
import logging
import random
import os
from PIL import Image, ImageDraw, ImageFont, ImageFilter
import string
import json
import io
from lock import has_permission

logger = logging.getLogger(__name__)
# –°–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤ —Å —ç–º–æ–¥–∂–∏
ALL_FRUITS = [
    "üçé", "üçå", "üçá", "üçì", "üçç",
    "ü•≠", "ü•ù", "üçë", "üçí", "üçâ",
    "üçã", "üçà", "üçê", "üçä", "üçè",
    "ü••", "üçÖ"
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    "captcha_type": "button",  # –í–æ–∑–º–æ–∂–Ω—ã–µ: button, math, fruits, image
    "time_limit": 60,  # –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "custom_captcha_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!",
    "button_text": "–Ø –Ω–µ –±–æ—Ç!"
}

CONFIG_FILE = "lyssa_config.json"


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    if not os.path.exists(CONFIG_FILE):
        logger.warning("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        save_config(DEFAULT_CONFIG)  # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return DEFAULT_CONFIG
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            config = json.load(file)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return config
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return DEFAULT_CONFIG


def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
    try:
        with open(CONFIG_FILE, "w", encoding="utf-8") as file:
            json.dump(config, file, indent=4, ensure_ascii=False)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
bot_config = load_config()
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–ø—á
verified_users = set()
user_math_captcha = {}  # –î–ª—è math-–∫–∞–ø—á–∏
user_captcha_code = {}  # –î–ª—è image-–∫–∞–ø—á–∏
captcha_jobs = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –∫–∞–ø—á–∞–º
user_captcha_messages = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è message_id –∫–∞–ø—á–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π


def generate_captcha_code(length=5):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))


def generate_captcha_image(
    text,
    font_path='Fonts/arial.ttf',  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    size=(200, 80),  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    noise_points=50,
    blur_intensity=0
):
    width, height = size  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä size
    background_color = (255, 255, 255)
    font_size = 36

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.new('RGB', (width, height), background_color)
    draw = ImageDraw.Draw(image)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        font = ImageFont.load_default()
        logger.warning("–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    text_color = (random.randint(0, 100), random.randint(0, 100), random.randint(0, 100))
    bbox = font.getbbox(text)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]

    text_x = (width - text_width) // 2
    text_y = (height - text_height) // 2
    draw.text((text_x, text_y), text, font=font, fill=text_color)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –∫–∞–ø—á–∏
    for _ in range(5):
        start = (random.randint(0, width), random.randint(0, height))
        end = (random.randint(0, width), random.randint(0, height))
        line_color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        draw.line([start, end], fill=line_color, width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
    for _ in range(noise_points):
        x = random.randint(0, width)
        y = random.randint(0, height)
        draw.point((x, y), fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–∞–∑–º—ã—Ç–∏—è
    for _ in range(blur_intensity):
        image = image.filter(ImageFilter.BLUR)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    byte_io = io.BytesIO()
    image.save(byte_io, 'PNG')
    byte_io.seek(0)

    return byte_io


async def captcha_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—è–µ—Ç —Ç–∏–ø –∫–∞–ø—á–∏."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not await has_permission(update, context):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    global bot_config
    bot_config = load_config()

    if context.args:
        new_type = context.args[0].lower()
        if new_type in ["button", "math", "fruits", "image"]:
            bot_config["captcha_type"] = new_type
            save_config(bot_config)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await update.message.reply_text(f"–¢–∏–ø –∫–∞–ø—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_type}")
            logger.info(f"–¢–∏–ø –∫–∞–ø—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_type}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–∞–ø—á–∏
            if new_type == "button":
                keyboard = [[InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏", callback_data="example_button")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–∞–ø—á–∏ –∫–Ω–æ–ø–∫–æ–π:", reply_markup=reply_markup)
            elif new_type == "math":
                # –ü—Ä–∏–º–µ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏
                expression = "3 + 5 = ?"
                buttons = [
                    [InlineKeyboardButton("8", callback_data="example_math_correct")],
                    [InlineKeyboardButton("7", callback_data="example_math_wrong")]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä math –∫–∞–ø—á–∏: {expression}", reply_markup=reply_markup)
            elif new_type == "fruits":
                # –ü—Ä–∏–º–µ—Ä —Ñ—Ä—É–∫—Ç–æ–≤–æ–π –∫–∞–ø—á–∏
                example_fruits = ["üçé", "üçå", "üçá", "üçç"]
                correct_fruit = "üçç"
                buttons = [
                    [InlineKeyboardButton(fruit,
                                          callback_data="example_fruit_correct" if fruit == correct_fruit else "example_fruit_wrong")]
                    for fruit in example_fruits
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text("–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–∞–ø—á–∏ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏: –≤—ã–±–µ—Ä–∏—Ç–µ üçç", reply_markup=reply_markup)
            elif new_type == "image":
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                code = generate_captcha_code(length=5)
                captcha_image = generate_captcha_image(code)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
                buttons = [
                    InlineKeyboardButton(char, callback_data=f"example_image_{char}")
                    for char in random.sample(code, len(code))
                ]
                reply_markup = InlineKeyboardMarkup([buttons])  # –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=InputFile(captcha_image, filename="example_captcha.png"),
                    caption="–í–æ—Ç –ø—Ä–∏–º–µ—Ä image –∫–∞–ø—á–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–ø—á–∏: button, math, fruits, image.")
    else:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –∫–∞–ø—á–∏: {bot_config['captcha_type']}")


async def handle_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    chat_id = update.effective_chat.id
    for user in update.message.new_chat_members:
        if user.id in verified_users:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
            continue

        captcha_type = bot_config["captcha_type"]
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Ç–∏–ø–∞ {captcha_type}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if user.username:
            user_display = f"@{user.username}"
        else:
            user_display = user.full_name

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è
        if user.id in user_math_captcha:
            del user_math_captcha[user.id]
            logger.info(f"–£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ math –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")
        if user.id in user_captcha_code:
            del user_captcha_code[user.id]
            logger.info(f"–£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ image –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")

        if captcha_type == "button":
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = load_config()
                time_limit = config.get("time_limit", DEFAULT_CONFIG["time_limit"])

                # –ö–Ω–æ–ø–∫–∞ "–Ø –Ω–µ –±–æ—Ç!"
                keyboard = [[InlineKeyboardButton(bot_config["button_text"], callback_data="captcha_ok")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{user_display}, {bot_config['custom_captcha_message']}, —É –≤–∞—Å –µ—Å—Ç—å {time_limit}",
                    reply_markup=reply_markup
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
                if user.id not in user_captcha_messages:
                    user_captcha_messages[user.id] = {}
                user_captcha_messages[user.id]['captcha'] = message.message_id

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await restrict_user(context, chat_id, user.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

        elif captcha_type == "math":
            try:
                # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ø—á–∞ (—Å–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ)
                num1 = random.randint(1, 20)
                num2 = random.randint(1, 20)
                operation = random.choice(['+', '-'])
                expression = f"{num1} {operation} {num2} = ?"
                answer = num1 + num2 if operation == '+' else num1 - num2
                user_math_captcha[user.id] = answer

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
                possible_answers = set()
                possible_answers.add(answer)
                while len(possible_answers) < 4:
                    wrong_answer = answer + random.choice([-3, -2, -1, 1, 2, 3])
                    if wrong_answer > 0:
                        possible_answers.add(wrong_answer)
                possible_answers = list(possible_answers)
                random.shuffle(possible_answers)

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                buttons = []
                for ans in possible_answers:
                    if ans == answer:
                        buttons.append([InlineKeyboardButton(str(ans), callback_data="captcha_math_ok")])
                    else:
                        buttons.append([InlineKeyboardButton(str(ans), callback_data="captcha_math_fail")])
                reply_markup = InlineKeyboardMarkup(buttons)

                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{user_display}, {expression}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                    reply_markup=reply_markup
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ math –∫–∞–ø—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
                if user.id not in user_captcha_messages:
                    user_captcha_messages[user.id] = {}
                user_captcha_messages[user.id]['captcha'] = message.message_id

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await restrict_user(context, chat_id, user.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ math –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

        elif captcha_type == "fruits":
            try:
                # –ö–∞–ø—á–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏
                if len(ALL_FRUITS) < 4:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–ø—á–∏."
                    )
                    logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–ø—á–∏.")
                    return

                chosen_emojis = random.sample(ALL_FRUITS, 4)
                correct_emoji = random.choice(chosen_emojis)
                instruction_text = f"{user_display}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç {correct_emoji}, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!"
                buttons = []
                for emoji in chosen_emojis:
                    if emoji == correct_emoji:
                        buttons.append([InlineKeyboardButton(emoji, callback_data="captcha_fruit_ok")])
                    else:
                        buttons.append([InlineKeyboardButton(emoji, callback_data="captcha_fruit_fail")])
                random.shuffle(buttons)
                reply_markup = InlineKeyboardMarkup(buttons)

                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=instruction_text,
                    reply_markup=reply_markup
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ñ—Ä—É–∫—Ç–æ–≤–æ–π –∫–∞–ø—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
                if user.id not in user_captcha_messages:
                    user_captcha_messages[user.id] = {}
                user_captcha_messages[user.id]['captcha'] = message.message_id

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await restrict_user(context, chat_id, user.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ—Ä—É–∫—Ç–æ–≤–æ–π –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

        elif captcha_type == "image":
            try:
                code = generate_captcha_code()
                user_captcha_code[user.id] = {"code": code, "current_index": 0}

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏
                font_path = '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'
                captcha_image = generate_captcha_image(code, font_path=font_path, size=(200, 80))

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
                buttons = [
                    InlineKeyboardButton(char, callback_data=f"captcha_image_{char}")
                    for char in random.sample(code, len(code))
                ]
                reply_markup = InlineKeyboardMarkup([buttons])

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=InputFile(captcha_image, filename='captcha.png'),
                    caption=f"{user_display}, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    reply_markup=reply_markup
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ image –∫–∞–ø—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∫–∞–ø—á–∏
                if user.id not in user_captcha_messages:
                    user_captcha_messages[user.id] = {}
                user_captcha_messages[user.id]['captcha'] = message.message_id

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await restrict_user(context, chat_id, user.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ image –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

        else:
            try:
                # –ï—Å–ª–∏ —Ç–∏–ø –∫–∞–ø—á–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{user_display}, –¢–∏–ø –∫–∞–ø—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞–ø—á–∏: {captcha_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ –∫–∞–ø—á–∏: {e}")


async def handle_left_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É—Ö–æ–¥–∞ –∏–ª–∏ –∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞."""
    chat_id = update.effective_chat.id
    left_member = update.message.left_chat_member
    if left_member:
        user_id = left_member.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {left_member.username or left_member.full_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –≥—Ä—É–ø–ø—É.")

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
        await cancel_captcha_jobs(context, user_id, chat_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        message_info = user_captcha_messages.get(user_id)
        if message_info:
            for key, message_id in message_info.items():
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{key}' –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{key}' –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            del user_captcha_messages[user_id]


async def restrict_user(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏."""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions={
                'can_send_messages': False,
                'can_send_media_messages': False,
                'can_send_polls': False,
                'can_send_other_messages': False,
                'can_add_web_page_previews': False,
            },
        )
        logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    time_limit = config.get("time_limit", DEFAULT_CONFIG["time_limit"])

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ –ª–∏–º–∏—Ç–∞
    warning_time = time_limit // 2
    job_warning = context.job_queue.run_once(
        callback=send_warning,
        when=warning_time,
        data={"chat_id": chat_id, "user_id": user_id},
        name=f"warning_{user_id}"
    )
    logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {warning_time} —Å–µ–∫—É–Ω–¥.")

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∏–∫ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
    job_kick = context.job_queue.run_once(
        callback=kick_user,
        when=time_limit,
        data={"chat_id": chat_id, "user_id": user_id},
        name=f"kick_{user_id}"
    )
    logger.info(f"–ö–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {time_limit} —Å–µ–∫—É–Ω–¥.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–º–µ–Ω–∞
    captcha_jobs[user_id] = {
        'warning': job_warning,
        'kick': job_kick,
    }
    logger.info(
        f"–ö–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {warning_time} —Å–µ–∫—É–Ω–¥, –∫–∏–∫ —á–µ—Ä–µ–∑ {time_limit} —Å–µ–∫—É–Ω–¥.")


async def send_warning(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –æ—Å—Ç–∞–≤—à–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏."""
    job = context.job
    data = job.data
    chat_id = data["chat_id"]
    user_id = data["user_id"]

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        time_limit = config.get("time_limit", DEFAULT_CONFIG["time_limit"])

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        warning_time = time_limit // 2

        user = await context.bot.get_chat_member(chat_id, user_id)
        if user.status in ["left", "kicked", "restricted"]:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return

        user_full_name = user.user.full_name
        mention = f"@{user.user.username}" if user.user.username else user_full_name

        warning_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention}: —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {warning_time} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É.",
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if user_id not in user_captcha_messages:
            user_captcha_messages[user_id] = {}
        user_captcha_messages[user_id]['warning'] = warning_message.message_id

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def kick_user(context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã –∑–∞ –Ω–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏."""
    job = context.job
    data = job.data
    chat_id = data["chat_id"]
    user_id = data["user_id"]
    try:
        user = await context.bot.get_chat_member(chat_id, user_id)
        if user.status in ["left", "kicked"]:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ö–∏–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ban_chat_member –≤–º–µ—Å—Ç–æ kick_chat_member
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
        user = await context.bot.get_chat_member(chat_id, user_id)
        user_full_name = user.user.full_name
        mention = f"@{user.user.username}" if user.user.username else user_full_name

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ –Ω–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏.",
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data

    user_id = query.from_user.id
    chat_id = query.message.chat.id
    try:
        user = await context.bot.get_chat_member(chat_id, user_id)
        user_full_name = user.user.full_name
        mention = f"@{user.user.username}" if user.user.username else user_full_name
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        mention = f"<@{user_id}>"

    if data == "captcha_ok":
        verified_users.add(user_id)
        await query.edit_message_text(f"{mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É.")
        await cancel_captcha_jobs(context, user_id, chat_id)

    elif data == "captcha_math_ok":
        verified_users.add(user_id)
        await query.edit_message_text(f"{mention}, –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª math –∫–∞–ø—á—É.")
        await cancel_captcha_jobs(context, user_id, chat_id)

    elif data == "captcha_math_fail":
        await query.edit_message_text(f"{mention}, –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ math –∫–∞–ø—á—É.")
        await kick_user_immediately(context, chat_id, user_id)

    elif data == "captcha_fruit_ok":
        verified_users.add(user_id)
        await query.edit_message_text(f"{mention}, –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ñ—Ä—É–∫—Ç–æ–≤—É—é –∫–∞–ø—á—É.")
        await cancel_captcha_jobs(context, user_id, chat_id)

    elif data == "captcha_fruit_fail":
        await query.edit_message_text(f"{mention}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ñ—Ä—É–∫—Ç–æ–≤—É—é –∫–∞–ø—á—É.")
        await kick_user_immediately(context, chat_id, user_id)

    elif data.startswith("captcha_image_"):
        char_clicked = data.split("_")[-1]
        user_captcha_info = user_captcha_code.get(user_id, {})
        if not user_captcha_info:
            await query.edit_message_caption("–û—à–∏–±–∫–∞! –ö–æ–¥ –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.warning(f"–ö–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        expected_code = user_captcha_info["code"]
        current_index = user_captcha_info.get("current_index", 0)

        if char_clicked == expected_code[current_index]:
            user_captcha_info["current_index"] += 1
            if user_captcha_info["current_index"] == len(expected_code):
                verified_users.add(user_id)
                await query.edit_message_caption("–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª image –∫–∞–ø—á—É.")
                await cancel_captcha_jobs(context, user_id, chat_id)
            else:
                await query.answer("–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.")
        else:
            await query.edit_message_caption("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–∞! –í—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª: {char_clicked}")
            await kick_user_immediately(context, chat_id, user_id)

    elif data == "captcha_math_fail":
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ math –∫–∞–ø—á—É
        await query.edit_message_text(f"{mention}, –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ math –∫–∞–ø—á—É.")
        await kick_user_immediately(context, chat_id, user_id)

    elif data == "captcha_fruit_ok":
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä—É–∫—Ç
        verified_users.add(user_id)
        await query.edit_message_text(f"{mention}, –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ñ—Ä—É–∫—Ç–æ–≤—É—é –∫–∞–ø—á—É.")
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞–ø—á–µ
        await cancel_captcha_jobs(context, user_id, chat_id)

    elif data == "captcha_fruit_fail":
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä—É–∫—Ç
        await query.edit_message_text(f"{mention}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ñ—Ä—É–∫—Ç–æ–≤—É—é –∫–∞–ø—á—É.")
        await kick_user_immediately(context, chat_id, user_id)


async def cancel_captcha_jobs(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–ø—á–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    jobs = captcha_jobs.get(user_id, {})
    for job_key, job in jobs.items():
        try:
            job.schedule_removal()
            logger.info(f"–ó–∞–¥–∞–Ω–∏–µ '{job_key}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ '{job_key}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    captcha_jobs.pop(user_id, None)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
    message_info = user_captcha_messages.get(user_id, {})
    for key, message_id in message_info.items():
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{key}' –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{key}' –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    user_captcha_messages.pop(user_id, None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = await context.bot.get_chat_member(chat_id, user_id)
        if user.status == "kicked":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ —á–∞—Ç–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        elif user.status == "left":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤—Å—ë –µ—â—ë –≤ —á–∞—Ç–µ
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions={
                'can_send_messages': True,
                'can_send_media_messages': True,
                'can_send_polls': True,
                'can_send_other_messages': True,
                'can_add_web_page_previews': True,
            },
        )
        logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û—á–∏—Å—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–ø—á–∏
    if user_id in user_math_captcha:
        del user_math_captcha[user_id]
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ math –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    if user_id in user_captcha_code:
        del user_captcha_code[user_id]
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ image –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ verified_users, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    if user_id in verified_users:
        verified_users.remove(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ verified_users.")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions={
                'can_send_messages': True,
                'can_send_media_messages': True,
                'can_send_polls': True,
                'can_send_other_messages': True,
                'can_add_web_page_previews': True,
            },
        )
        logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–ø—á–∏ 'math' –∏ 'image'."""
    user = update.effective_user
    if not user:
        return

    user_id = user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ math-–∫–∞–ø—á—É
    if user_id in user_math_captcha:
        expected_answer = user_math_captcha[user_id]
        try:
            user_answer = int(update.message.text.strip())
            if user_answer == expected_answer:
                verified_users.add(user_id)
                await update.message.reply_text("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª math –∫–∞–ø—á—É —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                del user_math_captcha[user_id]
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞–ø—á–µ
                await cancel_captcha_jobs(context, user_id, chat_id)
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ math –∫–∞–ø—á—É.")
                await kick_user_immediately(context, chat_id, user_id)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ math –∫–∞–ø—á—É.")
            await kick_user_immediately(context, chat_id, user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ image-–∫–∞–ø—á—É (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if user_id in user_captcha_code:
        expected_code = user_captcha_code[user_id]
        user_code = update.message.text.strip()
        if user_code == expected_code:
            verified_users.add(user_id)
            await update.message.reply_text("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª image –∫–∞–ø—á—É —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            del user_captcha_code[user_id]
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞–ø—á–µ
            await cancel_captcha_jobs(context, user_id, chat_id)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –Ω–∞ image –∫–∞–ø—á—É.")
            await kick_user_immediately(context, chat_id, user_id)
        return


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)